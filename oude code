     String[] Achternamen = new String[3] ;
        int[] leeftijd = {12,54,23,65,32,76,78,4};
        Scanner scn = new Scanner(System.in);

        System.out.println("Nieuwe klanten toevoegen? y/n");
        String nieuweKlanten = scn.nextLine();
        if (nieuweKlanten.equals("y")) {

            for (int i = 0; i < Achternamen.length; i++){
                System.out.println("Voer achternaam in");
                Achternamen[i] = scn.nextLine();

        }

        }

        System.out.println("Wilt u zoeken via de linear search methode? y/n");
        String linearZoeker = scn.nextLine();

        if (linearZoeker.equals("y")) {

            System.out.println("Zoek op achternaam");
            String zoekTerm;
            zoekTerm = scn.next();
            System.out.println("search(achternamen): " + linearSearch(Achternamen, zoekTerm));
        } else {
            sort(leeftijd);
            //System.out.println("Dan niet...");
        }

        System.out.println("Wilt u leeftijden sorteren via merge sort? y/n");
#######################################################################################################################


 public boolean remove(int value) {
        Node focusNode = root;
        Node parent = root;

        boolean isItALeftChild = true;
        while (focusNode.value != value){

            parent = focusNode;

            if (value < focusNode.value){

                isItALeftChild = true;

                focusNode = focusNode.left;
            } else {

                isItALeftChild = false;
                focusNode = focusNode.right;
            }

            if (focusNode == null){
                return false;
            }
        }

        if (focusNode.left == null && focusNode.right == null){

            if(focusNode == root){

                root = null;

            } else if (isItALeftChild){

                parent.left = null;

            } else {

                parent.right = null;
            }

        }

        else if (focusNode.right == null){

            if (focusNode == root){
                root = focusNode.left;
            } else if (isItALeftChild){
                parent.left = focusNode.left;
            } else { parent.right = focusNode.left;
        }

         else if(focusNode.left == null){

            }
    }

##################################################################################################################


          @Override
            public String toString(){
                String out = "[";
                boolean first = true;
                System.out.println(size());
                for(int n=0; n < size();n++) {
                    E e = elements[n];
                    System.out.println("ArrayQueue " + elements[n]);

                    if(!first) {
                        out += ", ";
                    }
                    if (e != null){
                        out += e.toString();
                    }
                    first = false;
                }
                return out+"]";

            }


    public String toString() {

        return "KlantID:" + this.klantID + ","
                + "BestellingID:" + this.bestellingID + "," + "Verwerking:"
                + this.verwerking + "," + "Tijd:" + this.duur + "," + "Compleet:" + this.compleet + "," + "Wacht op bestelling:" + this.dadelijk;
    }


@Override
    public void add(E element) {

        if (size() == elements.length - 1){
            resize();
        }
        elements[back] = element;
        if (back < elements.length - 1){
            ++back;
        } else {
            back = 0;
        }
    }

    @Override
    public E element() {
        if (size() == 0){
            throw new NoSuchElementException();
        }
        return elements[front];
    }

    @Override
    public boolean isEmpty() {
        return (size() == 0);
    }

    @Override
    public E remove() {
        if (size() == 0){
            throw new NoSuchElementException();
        }
        E element = elements[front];
        elements[front] = null;
        ++front;
        if (front == back){
            front = back = 0;
        }
        if (front == elements.length){
            front = 0;
        }

        return element;
    }

    @Override
    public int size() {
        if (front <= back){
            return back - front;
        } else {
            return back - front + elements.length;
        }
    }



    private void resize(){
        int size = size();
        int len = elements.length;
        assert size == len;
        Object[] a = new Object[2*len];
        System.arraycopy(elements, front, a, 0, len - front);
        System.arraycopy(elements, 0, a, len - front, back);
        elements = (E[])a;
        front = 0;
        back = size;
    }


    #########################

      @Override
        public void add(E element) {
            Node oldRear = rear;
            rear = new Node();
            rear.element = element;
            rear.next = null;
            if (isEmpty()){
                front = rear;
            } else {
                oldRear.next = rear;
            }
            ++size;

        }

        @Override
        public boolean isEmpty() {
            return (size() == 0);
        }

        @Override
        public E remove() {
           E element = front.element;
            front = front.next;
            if (isEmpty()){
                rear = null;
            }
            size--;
            return element;


        }

        @Override
        public int size() {
           return size;
        }



        public String toString(){
            String out = "[";
            boolean first = true;
            System.out.println(size());
            for(int n=0; n < size();n++) {
                E e = elements[n];
                System.out.println("ArrayQueue " + elements[n]);

                if(!first) {
                    out += ", ";
                }
                if (e != null){
                    out += e.toString();
                }
                first = false;
            }
            return out+"]";

        }